AWSTemplateFormatVersion: 2010-09-09
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: key name doesn't exist
  OSUser:
    Description: User name which will allow to login through ssh
    Type: String
    AllowedPattern: '[a-z_][a-z0-9_-]*[$]?'
    # https://www.unix.com/man-page/linux/8/useradd/
  PubKey:
    Description: Public Key for OSUser
    Type: String
  SGIngressSSH:
    Description: ID of an existing Security Group to allow ssh connection
    Type: 'AWS::EC2::SecurityGroup::Id'
    ConstraintDescription: Security Group ID doesn't exist
  VpcId:
    Description: ID of an existing VPC
    Type:  'AWS::EC2::VPC::Id'
    ConstraintDescription: VPC ID doesn't exist
  SubnetId:
    Description: ID of an existing SubnetId
    Type:  'AWS::EC2::Subnet::Id'
    ConstraintDescription: Subnet ID doesn't exist
  InstanceType:
    AllowedValues:
    - t3.micro
    Default: t3.micro
    Type: String
    Description: EC2 instance type. t3.micro is only acceptable type of instance
  LatestAmiId:
    Type:  'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
Resources:
  EC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref 'InstanceType'
      KeyName: !Ref 'KeyName'
      ImageId: !Ref 'LatestAmiId'
      SubnetId: !Ref 'SubnetId'
      SecurityGroupIds: 
        - !GetAtt ProxySQLSecurityGroup.GroupId
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -x
            adduser --user-group ${OSUser}
            mkdir /home/${OSUser}/.ssh
            chmod 700 /home/${OSUser}/.ssh
            touch /home/${OSUser}/.ssh/authorized_keys
            chmod 600 /home/${OSUser}/.ssh/authorized_keys
            chown -R ${OSUser}:${OSUser} /home/${OSUser}/.ssh
            echo ${PubKey} >> /home/${OSUser}/.ssh/authorized_keys
            cat /home/ec2-user/.ssh/authorized_keys >> /home/${OSUser}/.ssh/authorized_keys
            userdel --remove ec2-user
            touch /etc/sudoers.d/${OSUser}
            echo '${OSUser} ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers.d/${OSUser}
            sed -i 's/#Port 22/Port 40022/g' /etc/ssh/sshd_config
            systemctl restart sshd
            cat <<EOF | tee /etc/yum.repos.d/proxysql.repo
            [proxysql_repo]
            name= ProxySQL YUM repository
            baseurl=https://repo.proxysql.com/ProxySQL/proxysql-2.0.x/centos/latest
            gpgcheck=1
            gpgkey=https://repo.proxysql.com/ProxySQL/repo_pub_key
            EOF
            yum install -y proxysql-2.0.8-1
            mkdir /opt/proxysql
            chown -R proxysql:proxysql /opt/proxysql
            cat <<EOF | tee /etc/proxysql.cnf
            datadir="/opt/proxysql"
            admin_variables=
            {
             	admin_credentials="${OSUser}:admin"
            	mysql_ifaces="0.0.0.0:46032"
            	refresh_interval=2000
            	debug=false
            }
            mysql_variables=
            {
            	threads=4
            	max_connections=2048
            	default_query_delay=0
            	default_query_timeout=36000000
            	have_compress=true
            	poll_timeout=2000
            	interfaces="0.0.0.0:43306;/opt/proxysql/proxysql.sock"
            	default_schema="information_schema"
            	stacksize=1048576
            	server_version="5.7"
            	connect_timeout_server=3000
            	monitor_username="monitor"
            	monitor_password="monitor"
            	monitor_history=600000
            	monitor_connect_interval=60000
            	monitor_ping_interval=10000
            	monitor_read_only_interval=1500
            	monitor_read_only_timeout=500
            	ping_interval_server_msec=120000
            	ping_timeout_server=500
            	commands_stats=true
            	sessions_sort=true
            	connect_retries_on_failure=10
            }
            EOF
  ProxySQLSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via custom port and specific source
      VpcId: !Ref 'VpcId'
      SecurityGroupIngress:
      - IpProtocol: tcp
        SourceSecurityGroupId: !Ref 'SGIngressSSH'
        FromPort: 40022
        ToPort: 40022
  InitEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref EC2Instance
Outputs:
  Ec2PproxysqlId: 
    Description: Instance ID ec2-proxysql
    Value: !Ref EC2Instance